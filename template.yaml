AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  python-mocservice-serverless

  Sample SAM Template for python-mocservice-serverless

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  MockserviceDevGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: mockservice-dev-get.get
      Runtime: python3.8
      Role: !GetAtt 
        - MockserviceDevLambdaRole
        - Arn
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{endpointpath+}
            Method: get
      Environment:                                             
         Variables: 
          DYNAMODB_TABLE: "sam-test"

  MockserviceDevCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: mockservice-dev-create.create
      Runtime: python3.8
      Role: !GetAtt 
        - MockserviceDevLambdaRole
        - Arn
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{endpointpath+}
            Method: put
      Environment:                                             
         Variables: 
          DYNAMODB_TABLE: "sam-test"

  MockserviceDevListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api/
      Handler: mockservice-dev-list.list
      Runtime: python3.8
      Role: !GetAtt 
        - MockserviceDevLambdaRole
        - Arn
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /all
            Method: get
      Environment:                                             
         Variables: 
          DYNAMODB_TABLE: "sam-test"

  MockserviceDevLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:*'
                Effect: Allow
                Resource: "arn:aws:dynamodb:us-east-1:055697220840:table/sam-test"
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: mockservice-role-for-lambda

CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OAI'

CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https

S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: 
        "Fn::Join" : [ "-", 
          [  
            "mockservice-serverless-website",
            Ref: AWS::StackName 
          ] 
        ]

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/all/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt MockserviceDevGetFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt MockserviceDevLambdaRole.Arn

Metadata:
  AWS::ServerlessRepo::Application:
    Name: python-mockservice-serverless
    Description: A serverless version of an API. This will be build via CodeBuild and published via CodePipeline
    Author: Pratik Sharma
    Labels: ['tests']